# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x

# you can overwrite defaults here
  stage: dev
  region: us-east-1

  httpApi:
    cors: true

  environment:
    CATALOG_ITEM_QUEUE_URL: { Ref: catalogItemsQueue }
    TOPIC_ARN: { Ref: createProductTopic }

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        "arn:aws:dynamodb:us-east-1:810215748827:table/bicycle_shop_products"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        "arn:aws:dynamodb:us-east-1:810215748827:table/bicycle_shop_stock"
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ catalogItemsQueue, Arn ]
    - Effect: Allow
      Action:
        - sns:GetTopicAttributes,
        - sns:SetTopicAttributes,
        - sns:AddPermission,
        - sns:RemovePermission,
        - sns:DeleteTopic,
        - sns:Subscribe,
        - sns:ListSubscriptionsByTopic,
        - sns:Publish
      Resource: { Ref: createProductTopic }


# you can add packaging information here
# package:
#  patterns:
#   - "!*/**"
#   - "!*/service.js"
#   - "dist/**"
	
custom:
  documentation:
    version: '1'
    title: 'Bicycle Shop API'
    description: 'Bicycle Shop API'
    models:
      - name: "Product"
        description: "Product"
        contentType: "application/json"
        schema:
          $schema: "http://json-schema.org/draft-04/schema#"
          properties:
            type: "object"
            properties:
              description:
                type: "string"
                example: "Gravel Bike - glossy metallic midnight blue"
              id:
                type: "string"
                example: "bc-1"
              price:
                type: "number"
                example: 2400
              title:
                type: "string"
                example: "Bombtrack"
              count:
                type: "number"
                example: 1

functions:
  getProduct:
    handler: handlers/product.getProduct
    events:
      - httpApi:
          path: /products/{itemId}
          method: GET
    environment:
      productsTable: ${self:resources.Resources.productsTable.Properties.TableName}
      stockTable: ${self:resources.Resources.stockTable.Properties.TableName}
  getProductsList:
    handler: handlers/availableProducts.getProductsList
    events:
      - httpApi:
          path: /products
          method: GET
    environment:
      productsTable: ${self:resources.Resources.productsTable.Properties.TableName}
      stockTable: ${self:resources.Resources.stockTable.Properties.TableName}
  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - httpApi:
          path: /products
          method: POST
    environment:
      productsTable: ${self:resources.Resources.productsTable.Properties.TableName}
      stockTable: ${self:resources.Resources.stockTable.Properties.TableName}
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
    environment:
      productsTable: ${self:resources.Resources.productsTable.Properties.TableName}
      stockTable: ${self:resources.Resources.stockTable.Properties.TableName}

# you can add CloudFormation resource templates here
resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bicycle_shop_products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    stockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bicycle_shop_stock
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: {Ref: "createProductTopic"}
        Endpoint: dzmitry_zevakou@epam.com
        Protocol: email
        FilterPolicy:
          price:
            - numeric:
                ['<=', 2000]
    ExpensiveBikeSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: {Ref: "createProductTopic"}
        Endpoint: zdmitry.acc@gmail.com
        Protocol: email
        FilterPolicy:
          price:
            - numeric:
                ['>', 2000]
  	
  Outputs:
    catalogItemsQueueUrl:
      Value: { Ref: catalogItemsQueue }
      Export:
        Name: catalogItemsQueueUrl
